#include "StdAfx.h"
#include "vector.h"

using namespace EngineGL;
using namespace MathGL;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
/*                                VECTOR2                                     */
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Vector2::Vector2()
{
        x = 0;
        y = 0;
}


//------------------------------------------------------------------------------
Vector2::Vector2(float x, float y)
{
        this->x = x;
        this->y = y;
}

//------------------------------------------------------------------------------
Vector2::Vector2(const Vector2 &v)
{
        x = v.x;
        y = v.y;
}

Vector2::~Vector2()
{
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Vector2::operator float*()
{
        float *mas = new float[2];

        mas[0] = x;
        mas[1] = y;

        return mas;
}

//------------------------------------------------------------------------------
Vector2& Vector2::operator=(float v)
{
        x = v;
        y = v;

        return *this;
}

//------------------------------------------------------------------------------
Vector2& Vector2::operator=(const Vector2& v)
{
        x = v.x;
        y = v.y;

        return *this;
}

//------------------------------------------------------------------------------
Vector2& Vector2::operator++(int)
{
        x++;
        y++;

        return *this;
}

//------------------------------------------------------------------------------
Vector2& Vector2::operator--(int)
{
        x--;
        y--;

        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               + - (Vector2& v)
Vector2 Vector2::operator+(Vector2& v)
{
        Vector2 c;
        c.x = x + v.x;
        c.y = y + v.y;

        return c;
}

//------------------------------------------------------------------------------
Vector2 Vector2::operator-(Vector2& v)
{
        Vector2 c;
        c.x = x - v.x;
        c.y = y - v.y;

        return c;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               + - * / (float v)
Vector2 Vector2::operator+(float v)
{
        Vector2 c;
        c.x = x + v;
        c.y = y + v;

        return c;
}

//------------------------------------------------------------------------------
Vector2 Vector2::operator-(float v)
{
        Vector2 c;
        c.x = x - v;
        c.y = y - v;

        return c;
}

//------------------------------------------------------------------------------
Vector2 Vector2::operator*(float v)
{
        Vector2 c;
        c.x = x * v;
        c.y = y * v;

        return c;
}

//------------------------------------------------------------------------------
Vector2 Vector2::operator/(float v)
{
        Vector2 c;
        c.x = x / v;
        c.y = y / v;

        return c;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                              += -= (Vector2 &v)
Vector2& Vector2::operator+=(Vector2& v)
{
        x += v.x;
        y += v.y;

        return *this;
}

//------------------------------------------------------------------------------
Vector2& Vector2::operator-=(Vector2& v)
{
        x -= v.x;
        y -= v.y;

        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                      += -= *= /= (float v)
Vector2& Vector2::operator+=(float v)
{
        x += v;
        y += v;

        return *this;
}

//------------------------------------------------------------------------------
Vector2& Vector2::operator-=(float v)
{
        x -= v;
        y -= v;

        return *this;
}

//------------------------------------------------------------------------------
Vector2& Vector2::operator*=(float v)
{
        x *= v;
        y *= v;

        return *this;
}

//------------------------------------------------------------------------------
Vector2& Vector2::operator/=(float v)
{
        x /= v;
        y /= v;

        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               == != (Vector2 &v)
bool Vector2::operator==(Vector2& v)
{
        if( x == v.x && y == v.y)

                return true;

        else return false;
}

//------------------------------------------------------------------------------
bool Vector2::operator!=(Vector2& v)
{
        if( x != v.x || y != v.y )

                return true;

        else return false;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
/*                                VECTOR3                                     */
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Vector3::Vector3()
{
        x = 0;
        y = 0;
        z = 0;
}


//------------------------------------------------------------------------------
Vector3::Vector3(float x, float y, float z)
{
        this->x = x;
        this->y = y;
        this->z = z;
}

//------------------------------------------------------------------------------
Vector3::Vector3(const Vector3 &v)
{
        x = v.x;
        y = v.y;
        z = v.z;
}

Vector3::~Vector3()
{
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Vector3::operator float*()
{
        float *mas = new float[3];

        mas[0] = x;
        mas[1] = y;
        mas[2] = z;

        return mas;
}

//------------------------------------------------------------------------------
Vector3& Vector3::operator=(float v)
{
        x = v;
        y = v;
        z = v;

        return *this;
}

//------------------------------------------------------------------------------
Vector3& Vector3::operator=(const Vector3& v)
{
        x = v.x;
        y = v.y;
        z = v.z;

        return *this;
}

//------------------------------------------------------------------------------
Vector3& Vector3::operator++(int)
{
        x++;
        y++;
        z++;

        return *this;
}

//------------------------------------------------------------------------------
Vector3& Vector3::operator--(int)
{
        x--;
        y--;
        z--;

        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               + - (Vector3& v)
Vector3 Vector3::operator+(Vector3& v)
{
        Vector3 c;
        c.x = x + v.x;
        c.y = y + v.y;
        c.z = z + v.z;

        return c;
}

//------------------------------------------------------------------------------
Vector3 Vector3::operator-(Vector3& v)
{
        Vector3 c;
        c.x = x - v.x;
        c.y = y - v.y;
        c.z = z - v.z;

        return c;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               + - * / (float v)
Vector3 Vector3::operator+(float v)
{
        Vector3 c;
        c.x = x + v;
        c.y = y + v;
        c.z = z + v;

        return c;
}

//------------------------------------------------------------------------------
Vector3 Vector3::operator-(float v)
{
        Vector3 c;
        c.x = x - v;
        c.y = y - v;
        c.z = z - v;

        return c;
}

//------------------------------------------------------------------------------
Vector3 Vector3::operator*(float v)
{
        Vector3 c;
        c.x = x * v;
        c.y = y * v;
        c.z = z * v;

        return c;
}

//------------------------------------------------------------------------------
Vector3 Vector3::operator/(float v)
{
        Vector3 c;
        c.x = x / v;
        c.y = y / v;
        c.z = z / v;

        return c;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                              += -= (Vector3 &v)
Vector3& Vector3::operator+=(Vector3& v)
{
        x += v.x;
        y += v.y;
        z += v.z;

        return *this;
}

//------------------------------------------------------------------------------
Vector3& Vector3::operator-=(Vector3& v)
{
        x -= v.x;
        y -= v.y;
        z -= v.z;

        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                      += -= *= /= (float v)
Vector3& Vector3::operator+=(float v)
{
        x += v;
        y += v;
        z += v;

        return *this;
}

//------------------------------------------------------------------------------
Vector3& Vector3::operator-=(float v)
{
        x -= v;
        y -= v;
        z -= v;

        return *this;
}

//------------------------------------------------------------------------------
Vector3& Vector3::operator*=(float v)
{
        x *= v;
        y *= v;
        z *= v;

        return *this;
}

//------------------------------------------------------------------------------
Vector3& Vector3::operator/=(float v)
{
        x /= v;
        y /= v;
        z /= v;

        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               == != (Vector3 &v)
bool Vector3::operator==(Vector3& v)
{
        if( x == v.x && y == v.y && z != v.z )

                return true;

        else return false;
}

//------------------------------------------------------------------------------
bool Vector3::operator!=(Vector3& v)
{
        if( x != v.x || y != v.y || z != v.z )

                return true;

        else return false;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
/*                                VECTOR4                                     */
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Vector4::Vector4()
{
        x = 0;
        y = 0;
        z = 0;
        w = 0;
}


//------------------------------------------------------------------------------
Vector4::Vector4(float x, float y, float z, float w)
{
        this->x = x;
        this->y = y;
        this->z = z;
        this->w = w;
}

//------------------------------------------------------------------------------
Vector4::Vector4(const Vector4 &v)
{
        x = v.x;
        y = v.y;
        z = v.z;
        w = v.w;
}

Vector4::~Vector4()
{
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Vector4::operator float*()
{
        float *mas = new float[4];

        mas[0] = x;
        mas[1] = y;
        mas[2] = z;
        mas[3] = w;

        return mas;
}

//------------------------------------------------------------------------------
Vector4& Vector4::operator=(float v)
{
        x = v;
        y = v;
        z = v;
        w = v;

        return *this;
}

//------------------------------------------------------------------------------
Vector4& Vector4::operator=(const Vector4& v)
{
        x = v.x;
        y = v.y;
        z = v.z;
        w = v.w;

        return *this;
}

//------------------------------------------------------------------------------
Vector4& Vector4::operator++(int)
{
        x++;
        y++;
        z++;
        w++;

        return *this;
}

//------------------------------------------------------------------------------
Vector4& Vector4::operator--(int)
{
        x--;
        y--;
        z--;
        w--;

        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               + - (Vector4& v)
Vector4 Vector4::operator+(Vector4& v)
{
        Vector4 c;
        c.x = x + v.x;
        c.y = y + v.y;
        c.z = z + v.z;
        c.w = w + v.w;

        return c;
}

//------------------------------------------------------------------------------
Vector4 Vector4::operator-(Vector4& v)
{
        Vector4 c;
        c.x = x - v.x;
        c.y = y - v.y;
        c.z = z - v.z;
        c.w = w - v.w;

        return c;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               + - * / (float v)
Vector4 Vector4::operator+(float v)
{
        Vector4 c;
        c.x = x + v;
        c.y = y + v;
        c.z = z + v;
        c.w = w + v;

        return c;
}

//------------------------------------------------------------------------------
Vector4 Vector4::operator-(float v)
{
        Vector4 c;
        c.x = x - v;
        c.y = y - v;
        c.z = z - v;
        c.w = w - v;

        return c;
}

//------------------------------------------------------------------------------
Vector4 Vector4::operator*(float v)
{
        Vector4 c;
        c.x = x * v;
        c.y = y * v;
        c.z = z * v;
        c.w = w * v;

        return c;
}

//------------------------------------------------------------------------------
Vector4 Vector4::operator/(float v)
{
        Vector4 c;
        c.x = x / v;
        c.y = y / v;
        c.z = z / v;
        c.w = w / v;
        
        return c;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                              += -= (Vector4 &v)
Vector4& Vector4::operator+=(Vector4& v)
{
        x += v.x;
        y += v.y;
        z += v.z;
        w += v.w;

        return *this;
}

//------------------------------------------------------------------------------
Vector4& Vector4::operator-=(Vector4& v)
{
        x -= v.x;
        y -= v.y;
        z -= v.z;
        w -= v.w;

        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                      += -= *= /= (float v)
Vector4& Vector4::operator+=(float v)
{
        x += v;
        y += v;
        z += v;
        w += v;

        return *this;
}

//------------------------------------------------------------------------------
Vector4& Vector4::operator-=(float v)
{
        x -= v;
        y -= v;
        z -= v;
        w -= v;

        return *this;
}

//------------------------------------------------------------------------------
Vector4& Vector4::operator*=(float v)
{
        x *= v;
        y *= v;
        z *= v;
        w *= v;

        return *this;
}

//------------------------------------------------------------------------------
Vector4& Vector4::operator/=(float v)
{
        x /= v;
        y /= v;
        z /= v;
        w /= v;

        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               == != (Vector4 &v)
bool Vector4::operator==(Vector4& v)
{
        if( x == v.x && y == v.y && z != v.z && w != v.w)

                return true;

        else return false;
}

//------------------------------------------------------------------------------
bool Vector4::operator!=(Vector4& v)
{
        if( x != v.x || y != v.y || z != v.z || w != v.w)

                return true;

        else return false;
}
