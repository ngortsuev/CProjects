#include "StdAfx.h"
#include "matrix.h"

using namespace EngineGL;
using namespace MathGL;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
/*                                MATRIX2                                     */
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Matrix2::Matrix2()
{
        v[0] = 0;
        v[1] = 0;
}

//------------------------------------------------------------------------------
Matrix2::Matrix2(Vector2 v1, Vector2 v2)
{
        v[0] = v1;
        v[1] = v2;
}

//------------------------------------------------------------------------------
Matrix2::Matrix2(double n11, double n12, double n21, double n22)
{
        v[0].x = n11;
        v[0].y = n12;
        v[1].x = n21;
        v[1].y = n22;
}

//------------------------------------------------------------------------------
Matrix2::Matrix2(Matrix2 &m)
{
        v[0] = m.v[0];
        v[1] = m.v[1];
}

//------------------------------------------------------------------------------
Matrix2::~Matrix2()
{
}

//------------------------------------------------------------------------------
Vector2 Matrix2::operator*(Vector2 &vector)
{
        Vector2 c;
        c.x = v[0].x * vector.x + v[0].y * vector.y;
        c.y = v[1].x * vector.x + v[1].y * vector.y;

        return c;
}

//------------------------------------------------------------------------------
double Matrix2::getDeterminant()
{
        return v[0].x * v[1].y - v[0].y * v[1].x;
}

//------------------------------------------------------------------------------
void  Matrix2::setIdentity()
{
        v[0] = 0;
        v[1] = 0;
        v[0].x = 1;
        v[1].y = 1;
}

//------------------------------------------------------------------------------
void  Matrix2::setTransposition()
{
        double tmp;

        tmp = v[1].x;
        v[1].x = v[0].y;
        v[0].y = tmp;
}

//------------------------------------------------------------------------------
void Matrix2::setCell(int row, int col, double value)
{
        if( row >= 0 && row < 2 )
        {
                if( col == 0 )v[row].x = value;
                if( col == 1 )v[row].y = value;
        }
}

//------------------------------------------------------------------------------
bool  Matrix2::IsIdentity()
{
        if( v[0].x == 1 && v[0].y == 0 &&
            v[1].x == 0 && v[1].y == 1 )

            return true;
            
        else return false;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
/*                                MATRIX3                                     */
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Matrix3::Matrix3()
{
        v[0] = 0;
        v[1] = 0;
        v[2] = 0;
}

//------------------------------------------------------------------------------
Matrix3::Matrix3(Vector3 v[3])
{
        this->v[0] = v[0];
        this->v[1] = v[1];
        this->v[2] = v[2];
}
//------------------------------------------------------------------------------
Matrix3::Matrix3(Vector3 v1, Vector3 v2, Vector3 v3)
{
        v[0] = v1;
        v[1] = v2;
        v[2] = v3;
}

//------------------------------------------------------------------------------
Matrix3::Matrix3(Matrix3 &m)
{
        v[0] = m.v[0];
        v[1] = m.v[1];
        v[2] = m.v[2];
}

//------------------------------------------------------------------------------
Matrix3::~Matrix3()
{
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Matrix3& Matrix3::operator=(double m)
{
        v[0] = m;
        v[1] = m;
        v[2] = m;

        return *this;
}

//------------------------------------------------------------------------------
Matrix3& Matrix3::operator=(Matrix3& m)
{
        v[0] = m.v[0];
        v[1] = m.v[1];
        v[2] = m.v[2];

        return *this;
}

//------------------------------------------------------------------------------
Matrix3& Matrix3::operator++(int)
{
        v[0]++;
        v[1]++;
        v[2]++;

        return *this;
}

//------------------------------------------------------------------------------
Matrix3& Matrix3::operator--(int)
{
        v[0]--;
        v[1]--;
        v[2]--;

        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                       + - * / (Matrix3& m)
Matrix3 Matrix3::operator+(Matrix3& m)
{
        Matrix3 c;
        c.v[0] = v[0] + m.v[0];
        c.v[1] = v[1] + m.v[1];
        c.v[2] = v[2] + m.v[2];

        return c;
}

//------------------------------------------------------------------------------
Matrix3 Matrix3::operator-(Matrix3& m)
{
        Matrix3 c;
        c.v[0] = v[0] - m.v[0];
        c.v[1] = v[1] - m.v[1];
        c.v[2] = v[2] - m.v[2];

        return c;
}

//------------------------------------------------------------------------------
Matrix3 Matrix3::operator*(Matrix3& m)
{
        Matrix3 c;

        //col1
        c.v[0].x = v[0].x * m.v[0].x +
                   v[0].y * m.v[1].x +
                   v[0].z * m.v[2].x;

        c.v[1].x = v[1].x * m.v[0].x +
                   v[1].y * m.v[1].x +
                   v[1].z * m.v[2].x;

        c.v[2].x = v[2].x * m.v[0].x +
                   v[2].y * m.v[1].x +
                   v[2].z * m.v[2].x;

        //col2
        c.v[0].y = v[0].x * m.v[0].y +
                   v[0].y * m.v[1].y +
                   v[0].z * m.v[2].y;

        c.v[1].y = v[1].x * m.v[0].y +
                   v[1].y * m.v[1].y +
                   v[1].z * m.v[2].y;

        c.v[2].y = v[2].x * m.v[0].y +
                   v[2].y * m.v[1].y +
                   v[2].z * m.v[2].y;

        //col3
        c.v[0].z = v[0].x * m.v[0].z +
                   v[0].y * m.v[1].z +
                   v[0].z * m.v[2].z;

        c.v[1].z = v[1].x * m.v[0].z +
                   v[1].y * m.v[1].z +
                   v[1].z * m.v[2].z;

        c.v[2].z = v[2].x * m.v[0].z +
                   v[2].y * m.v[1].z +
                   v[2].z * m.v[2].z;

        return c;
}

//------------------------------------------------------------------------------
Matrix3 Matrix3::operator/(Matrix3& m)
{
        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               + - * / (double m)
Matrix3 Matrix3::operator+(double m)
{
        Matrix3 c;
        c.v[0] = v[0] + m;
        c.v[1] = v[1] + m;
        c.v[2] = v[2] + m;

        return c;
}

//------------------------------------------------------------------------------
Matrix3 Matrix3::operator-(double m)
{
        Matrix3 c;
        c.v[0] = v[0] - m;
        c.v[1] = v[1] - m;
        c.v[2] = v[2] - m;

        return c;
}

//------------------------------------------------------------------------------
Matrix3 Matrix3::operator*(double m)
{
        Matrix3 c;
        c.v[0] = v[0] * m;
        c.v[1] = v[1] * m;
        c.v[2] = v[2] * m;

        return c;
}

//------------------------------------------------------------------------------
Matrix3 Matrix3::operator/(double m)
{
        Matrix3 c;
        c.v[0] = v[0] / m;
        c.v[1] = v[1] / m;
        c.v[2] = v[2] / m;

        return c;
}

//------------------------------------------------------------------------------
Vector3 Matrix3::operator*(Vector3 &vector)
{
        Vector3 c;

        c.x = v[0].x * vector.x + v[0].y * vector.y + v[0].z * vector.z;
        c.y = v[1].x * vector.x + v[1].y * vector.y + v[1].z * vector.z;
        c.z = v[2].x * vector.x + v[2].y * vector.y + v[2].z * vector.z;

        return c;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                       += -= *= /= (Matrix3& m)
Matrix3& Matrix3::operator+=(Matrix3& m)
{
        v[0] += m.v[0];
        v[1] += m.v[1];
        v[2] += m.v[2];

        return *this;
}

//------------------------------------------------------------------------------
Matrix3& Matrix3::operator-=(Matrix3& m)
{
        v[0] -= m.v[0];
        v[1] -= m.v[1];
        v[2] -= m.v[2];

        return *this;
}

//------------------------------------------------------------------------------
Matrix3& Matrix3::operator*=(Matrix3& m)
{
        return *this;
}

//------------------------------------------------------------------------------
Matrix3& Matrix3::operator/=(Matrix3& m)
{
        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                             += -= *= /= (double m)
Matrix3& Matrix3::operator+=(double m)
{
        v[0] += m;
        v[1] += m;
        v[2] += m;

        return *this;
}

//------------------------------------------------------------------------------
Matrix3& Matrix3::operator-=(double m)
{
        v[0] -= m;
        v[1] -= m;
        v[2] -= m;

        return *this;
}

//------------------------------------------------------------------------------
Matrix3& Matrix3::operator*=(double m)
{
        v[0] *= m;
        v[1] *= m;
        v[2] *= m;
        
        return *this;
}

//------------------------------------------------------------------------------
Matrix3& Matrix3::operator/=(double m)
{
        v[0] /= m;
        v[1] /= m;
        v[2] /= m;
        
        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               == != (Matrix3& m)
bool Matrix3::operator==(Matrix3& m)
{
        if( v[0] == m.v[0] && v[1] == m.v[1] && v[2] == m.v[2] )

                return true;

        else return false;        
}

//------------------------------------------------------------------------------
bool Matrix3::operator!=(Matrix3& m)
{
        if( v[0] != m.v[0] || v[1] != m.v[1] || v[2] != m.v[2] )

                return true;

        else return false;
}

//------------------------------------------------------------------------------
Matrix2 Matrix3::getMinor(int i, int j)
{
       int l = 0;
       Matrix2 c;

       for(int k = 0; k < 3; k++)
       {
                if( k != i )
                {
                        if( j == 0 )
                        {
                                c.v[l].x = v[k].y;
                                c.v[l].y = v[k].z;
                        }
                        if( j == 1 )
                        {
                                c.v[l].x = v[k].x;
                                c.v[l].y = v[k].z;
                        }
                        if( j == 2 )
                        {
                                c.v[l].x = v[k].x;
                                c.v[l].y = v[k].y;
                        }
                        l++;
                }
       }
       return c; 
}

//------------------------------------------------------------------------------
double Matrix3::getDeterminant()
{
        return getDeterminant(0);
}

//------------------------------------------------------------------------------
double Matrix3::getDeterminant(int i)
{
        double det;

        det = pow((double)-1, (double)i+2) * v[i].x * this->getMinor(i,0).getDeterminant() +
              pow((double)-1, (double)i+3) * v[i].y * this->getMinor(i,1).getDeterminant() +
              pow((double)-1, (double)i+4) * v[i].z * this->getMinor(i,2).getDeterminant();

        return det;
}

//------------------------------------------------------------------------------
void Matrix3::setIdentity()
{
        *this = 0;
        v[0].x = 1;
        v[1].y = 1;
        v[2].z = 1;
}

//------------------------------------------------------------------------------
void Matrix3::setTransposition()
{
        double tmp;

        tmp = v[1].x; v[1].x = v[0].y; v[0].y = tmp;
        tmp = v[2].x; v[2].x = v[0].z; v[0].z = tmp;

        tmp = v[3].y; v[3].y = v[2].z; v[2].z = tmp;
}

//------------------------------------------------------------------------------
void Matrix3::setCell(int row, int col, double value)
{
        if( row >= 0 && row < 3 )
        {
                if( col == 0 )v[row].x = value;
                if( col == 1 )v[row].y = value;
                if( col == 2 )v[row].z = value;
        }
}

//------------------------------------------------------------------------------
bool Matrix3::IsIdentity()
{
        if( v[0].x == 1 && v[0].y == 0 && v[0].z == 0 )
        if( v[1].x == 0 && v[1].y == 1 && v[1].z == 0 )
        if( v[2].x == 0 && v[2].y == 0 && v[2].z == 1 )

                return true;

        return false;
}

//------------------------------------------------------------------------------
Matrix3 Matrix3::getTranslate(double x, double y, double z)
{
        Matrix3 c;

        c.setIdentity();

        c.v[0].z = x;
        c.v[1].z = y;
        c.v[2].z = z;

        return c;
}

//------------------------------------------------------------------------------
Matrix3 Matrix3::getRotate(double degree, int type)
{
        Matrix3 c;

        //c

        return c;
}

//------------------------------------------------------------------------------
Matrix3 Matrix3::getScale(int type)
{
        Matrix3 c;

        return c;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
/*                                MATRIX4                                     */
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Matrix4::Matrix4()
{
        v[0] = 0;
        v[1] = 0;
        v[2] = 0;
        v[3] = 0;
}

//------------------------------------------------------------------------------
Matrix4::Matrix4(Vector4 v[4])
{
        this->v[0] = v[0];
        this->v[1] = v[1];
        this->v[2] = v[2];
        this->v[3] = v[3];
}

//------------------------------------------------------------------------------
Matrix4::Matrix4(Vector4 v1, Vector4 v2, Vector4 v3, Vector4 v4)
{
        v[0] = v1;
        v[1] = v2;
        v[2] = v3;
        v[3] = v4;
}

//------------------------------------------------------------------------------
Matrix4::Matrix4(Matrix4 &m)
{
        v[0] = m.v[0];
        v[1] = m.v[1];
        v[2] = m.v[2];
        v[3] = m.v[3];
}

//------------------------------------------------------------------------------
Matrix4::~Matrix4()
{
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Matrix4::operator double*()
{
        double **mas;

        mas = new double*[4];

        for(int i = 0; i < 4; i++)mas[i] = new double[4];

        for(int i = 0; i < 4; i++)
         for(int j = 0; j < 4; j++)
           mas[i][j] = getCell(i,j);

        return &mas[0][0];
}

//------------------------------------------------------------------------------
Matrix4& Matrix4::operator=(double m)
{
        v[0] = m;
        v[1] = m;
        v[2] = m;
        v[3] = m;

        return *this;
}

//------------------------------------------------------------------------------
Matrix4& Matrix4::operator=(const Matrix4& m)
{
        v[0] = m.v[0];
        v[1] = m.v[1];
        v[2] = m.v[2];
        v[3] = m.v[3];

        return *this;
}

//------------------------------------------------------------------------------
Matrix4& Matrix4::operator++(int)
{
        v[0]++;
        v[1]++;
        v[2]++;
        v[3]++;

        return *this;
}

//------------------------------------------------------------------------------
Matrix4& Matrix4::operator--(int)
{
        v[0]--;
        v[1]--;
        v[2]--;
        v[3]--;

        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                       + - * / (Matrix4& m)
Matrix4 Matrix4::operator+(Matrix4& m)
{
        Matrix4 c;
        c.v[0] = v[0] + m.v[0];
        c.v[1] = v[1] + m.v[1];
        c.v[2] = v[2] + m.v[2];
        c.v[3] = v[3] + m.v[3];

        return c;
}

//------------------------------------------------------------------------------
Matrix4 Matrix4::operator-(Matrix4& m)
{
        Matrix4 c;
        c.v[0] = v[0] - m.v[0];
        c.v[1] = v[1] - m.v[1];
        c.v[2] = v[2] - m.v[2];
        c.v[3] = v[3] - m.v[3];

        return c;
}

//------------------------------------------------------------------------------
Matrix4 Matrix4::operator*(Matrix4& m)
{
        Matrix4 c;

        //col1
        c.v[0].x = v[0].x * m.v[0].x +
                   v[0].y * m.v[1].x +
                   v[0].z * m.v[2].x +
                   v[0].w * m.v[3].x;


        c.v[1].x = v[1].x * m.v[0].x +
                   v[1].y * m.v[1].x +
                   v[1].z * m.v[2].x +
                   v[1].w * m.v[3].x;

        c.v[2].x = v[2].x * m.v[0].x +
                   v[2].y * m.v[1].x +
                   v[2].z * m.v[2].x +
                   v[2].w * m.v[3].x;

        c.v[3].x = v[3].x * m.v[0].x +
                   v[3].y * m.v[1].x +
                   v[3].z * m.v[2].x +
                   v[3].w * m.v[3].x;

        //col2
        c.v[0].y = v[0].x * m.v[0].y +
                   v[0].y * m.v[1].y +
                   v[0].z * m.v[2].y +
                   v[0].w * m.v[3].y;

        c.v[1].y = v[1].x * m.v[0].y +
                   v[1].y * m.v[1].y +
                   v[1].z * m.v[2].y +
                   v[1].w * m.v[3].y;

        c.v[2].y = v[2].x * m.v[0].y +
                   v[2].y * m.v[1].y +
                   v[2].z * m.v[2].y +
                   v[2].w * m.v[3].y;

        c.v[3].y = v[3].x * m.v[0].y +
                   v[3].y * m.v[1].y +
                   v[3].z * m.v[2].y +
                   v[3].w * m.v[3].y;

        //col3
        c.v[0].z = v[0].x * m.v[0].z +
                   v[0].y * m.v[1].z +
                   v[0].z * m.v[2].z +
                   v[0].w * m.v[3].z;

        c.v[1].z = v[1].x * m.v[0].z +
                   v[1].y * m.v[1].z +
                   v[1].z * m.v[2].z +
                   v[1].w * m.v[3].z;

        c.v[2].z = v[2].x * m.v[0].z +
                   v[2].y * m.v[1].z +
                   v[2].z * m.v[2].z +
                   v[2].w * m.v[3].z;

        c.v[3].z = v[3].x * m.v[0].z +
                   v[3].y * m.v[1].z +
                   v[3].z * m.v[2].z +
                   v[3].w * m.v[3].z;

        //col4
        c.v[0].w = v[0].x * m.v[0].z +
                   v[0].y * m.v[1].z +
                   v[0].z * m.v[2].z +
                   v[0].w * m.v[3].z;

        c.v[1].w = v[1].x * m.v[0].z +
                   v[1].y * m.v[1].z +
                   v[1].z * m.v[2].z +
                   v[1].w * m.v[3].z;

        c.v[2].w = v[2].x * m.v[0].z +
                   v[2].y * m.v[1].z +
                   v[2].z * m.v[2].z +
                   v[2].w * m.v[3].z;

        c.v[3].w = v[3].x * m.v[0].z +
                   v[3].y * m.v[1].z +
                   v[3].z * m.v[2].z +
                   v[3].w * m.v[3].z;

        return c;
}

//------------------------------------------------------------------------------
Matrix4 Matrix4::operator/(Matrix4& m)
{
        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               + - * / (double m)
Matrix4 Matrix4::operator+(double m)
{
        Matrix4 c;
        c.v[0] = v[0] + m;
        c.v[1] = v[1] + m;
        c.v[2] = v[2] + m;
        c.v[3] = v[3] + m;

        return c;
}

//------------------------------------------------------------------------------
Matrix4 Matrix4::operator-(double m)
{
        Matrix4 c;
        c.v[0] = v[0] - m;
        c.v[1] = v[1] - m;
        c.v[2] = v[2] - m;
        c.v[3] = v[3] - m;

        return c;
}

//------------------------------------------------------------------------------
Matrix4 Matrix4::operator*(double m)
{
        Matrix4 c;
        c.v[0] = v[0] * m;
        c.v[1] = v[1] * m;
        c.v[2] = v[2] * m;
        c.v[3] = v[3] * m;

        return c;
}

//------------------------------------------------------------------------------
Matrix4 Matrix4::operator/(double m)
{
        Matrix4 c;
        c.v[0] = v[0] / m;
        c.v[1] = v[1] / m;
        c.v[2] = v[2] / m;
        c.v[3] = v[3] / m;

        return c;
}

//------------------------------------------------------------------------------
Vector4 Matrix4::operator*(Vector4 &vector)
{
        Vector4 c;

        c.x = v[0].x * vector.x + v[0].y * vector.y + v[0].z * vector.z + v[0].w * vector.w;
        c.y = v[1].x * vector.x + v[1].y * vector.y + v[1].z * vector.z + v[1].w * vector.w;
        c.z = v[2].x * vector.x + v[2].y * vector.y + v[2].z * vector.z + v[2].w * vector.w;
        c.w = v[3].x * vector.x + v[3].y * vector.y + v[3].z * vector.z + v[3].w * vector.w;

        return c;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                       += -= *= /= (Matrix4& m)
Matrix4& Matrix4::operator+=(Matrix4& m)
{
        v[0] += m.v[0];
        v[1] += m.v[1];
        v[2] += m.v[2];
        v[3] += m.v[3];

        return *this;
}

//------------------------------------------------------------------------------
Matrix4& Matrix4::operator-=(Matrix4& m)
{
        v[0] -= m.v[0];
        v[1] -= m.v[1];
        v[2] -= m.v[2];
        v[3] -= m.v[3];

        return *this;
}

//------------------------------------------------------------------------------
Matrix4& Matrix4::operator*=(Matrix4& m)
{
        return *this;
}

//------------------------------------------------------------------------------
Matrix4& Matrix4::operator/=(Matrix4& m)
{
        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                             += -= *= /= (double m)
Matrix4& Matrix4::operator+=(double m)
{
        v[0] += m;
        v[1] += m;
        v[2] += m;
        v[3] += m;

        return *this;
}

//------------------------------------------------------------------------------
Matrix4& Matrix4::operator-=(double m)
{
        v[0] -= m;
        v[1] -= m;
        v[2] -= m;
        v[3] -= m;

        return *this;
}

//------------------------------------------------------------------------------
Matrix4& Matrix4::operator*=(double m)
{
        v[0] *= m;
        v[1] *= m;
        v[2] *= m;
        v[3] *= m;

        return *this;
}

//------------------------------------------------------------------------------
Matrix4& Matrix4::operator/=(double m)
{
        //*this = (*this / m);
        v[0] /= m;
        v[1] /= m;
        v[2] /= m;
        v[3] /= m;
        
        return *this;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//                               == != (Matrix4& m)
bool Matrix4::operator==(Matrix4& m)
{
        if( v[0] == m.v[0] && v[1] == m.v[1] && v[2] == m.v[2] && v[3] == m.v[3])

                return true;

        else return false;        
}

//------------------------------------------------------------------------------
bool Matrix4::operator!=(Matrix4& m)
{
        if( v[0] != m.v[0] || v[1] != m.v[1] || v[2] != m.v[2] || v[3] != m.v[3])

                return true;

        else return false;
}

//------------------------------------------------------------------------------
Matrix3 Matrix4::getMinor(int i, int j)
{
       int l = 0;
       Matrix3 c;

       for(int k = 0; k < 4; k++)
       {
                if( k != i )
                {
                        if( j == 0 )
                        {
                                c.v[l].x = v[k].y;
                                c.v[l].y = v[k].z;
                                c.v[l].z = v[k].w;
                        }
                        if( j == 1 )
                        {
                                c.v[l].x = v[k].x;
                                c.v[l].y = v[k].z;
                                c.v[l].z = v[k].w;
                        }
                        if( j == 2 )
                        {
                                c.v[l].x = v[k].x;
                                c.v[l].y = v[k].y;
                                c.v[l].z = v[k].w;
                        }
                        if( j == 3 )
                        {
                                c.v[l].x = v[k].x;
                                c.v[l].y = v[k].y;
                                c.v[l].z = v[k].z;
                        }
                        l++;
                }
       }
       return c;
}

//------------------------------------------------------------------------------
double Matrix4::getDeterminant()
{
        return getDeterminant(0);
}

//------------------------------------------------------------------------------
double Matrix4::getDeterminant(int i)
{
        double det;

        det = pow((double)-1, (double)i+2) * v[i].x * this->getMinor(i,0).getDeterminant() +
              pow((double)-1, (double)i+3) * v[i].y * this->getMinor(i,1).getDeterminant() +
              pow((double)-1, (double)i+4) * v[i].z * this->getMinor(i,2).getDeterminant() +
              pow((double)-1, (double)i+5) * v[i].w * this->getMinor(i,3).getDeterminant();

        return det;
}

//------------------------------------------------------------------------------
double Matrix4::getCell(int row, int col)
{
        if( row >= 0 && row < 4 )
        {
                if( col == 0 )return v[row].x;
                if( col == 1 )return v[row].y;
                if( col == 2 )return v[row].z;
                if( col == 3 )return v[row].w;
        }

        return 0;
}

//------------------------------------------------------------------------------
void Matrix4::setTransposition()
{
        double tmp;

        tmp = v[1].x; v[1].x = v[0].y; v[0].y = tmp;
        tmp = v[2].x; v[2].x = v[0].z; v[0].z = tmp;
        tmp = v[3].x; v[3].x = v[0].w; v[0].w = tmp;

        tmp = v[2].y; v[2].y = v[1].z; v[1].z = tmp;
        tmp = v[3].y; v[3].y = v[1].w; v[1].w = tmp;

        tmp = v[3].z; v[3].z = v[2].w; v[2].w = tmp;
}

//------------------------------------------------------------------------------
void Matrix4::setIdentity()
{
        *this = 0;
        v[0].x = 1;
        v[1].y = 1;
        v[2].z = 1;
        v[3].w = 1;
}

//------------------------------------------------------------------------------
void Matrix4::setCell(int row, int col, double value)
{
        if( row >= 0 && row < 4 )
        {
                if( col == 0 )v[row].x = value;
                if( col == 1 )v[row].y = value;
                if( col == 2 )v[row].z = value;
                if( col == 3 )v[row].w = value;
        }
}

//------------------------------------------------------------------------------
bool Matrix4::IsIdentity()
{
        if( v[0].x == 1 && v[0].y == 0 && v[0].z == 0 && v[0].w == 0 )
         if( v[1].x == 0 && v[1].y == 1 && v[1].z == 0 && v[1].w == 0 )
          if( v[2].x == 0 && v[2].y == 0 && v[2].z == 1 && v[2].w == 0 )
           if( v[3].x == 0 && v[3].y == 0 && v[3].z == 0 && v[3].w == 1 )

                return true;
                
        return false;
}
